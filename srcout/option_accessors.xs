# This file generated by './srcutil/accessors.pl' and is meant to generate easy boolean
# getters and setters

MODULE = JSON::SL PACKAGE = JSON::SL::Tuba PREFIX = PLTUBA_

PROTOTYPES: DISABLED

#define PLTUBA_OPTION_IX_utf8 1
#define PLTUBA_OPTION_IX_no_cache_mro 2
#define PLTUBA_OPTION_IX_cb_unified 3
    
int
PLTUBA__options(PLTUBA* obj, ...)
    ALIAS:
    utf8            = PLTUBA_OPTION_IX_utf8
    no_cache_mro    = PLTUBA_OPTION_IX_no_cache_mro
    cb_unified      = PLTUBA_OPTION_IX_cb_unified
    CODE:
    RETVAL = 0;
    if (ix == 0) {
        die("Do not call this function (_options) directly");
    }
    if (items > 2) {
        die("Usage: %s(o, ... boolean)", GvNAME(GvCV(cv)));
    }
    
    switch(ix) {
    case PLTUBA_OPTION_IX_utf8:
        RETVAL = obj->options.utf8;
        if (items == 2) {
            obj->options.utf8 = SvIV(ST(1));
        }
        break;
    case PLTUBA_OPTION_IX_no_cache_mro:
        RETVAL = obj->options.no_cache_mro;
        if (items == 2) {
            obj->options.no_cache_mro = SvIV(ST(1));
        }
        break;
    case PLTUBA_OPTION_IX_cb_unified:
        RETVAL = obj->options.cb_unified;
        if (items == 2) {
            obj->options.cb_unified = SvIV(ST(1));
        }
        break;
    default:
        die("Unrecognized IX!?");
        break;
    }
    OUTPUT: RETVAL
    

MODULE = JSON::SL PACKAGE = JSON::SL PREFIX = PLJSONSL_

PROTOTYPES: DISABLED

#define PLJSONSL_OPTION_IX_utf8 1
#define PLJSONSL_OPTION_IX_nopath 2
#define PLJSONSL_OPTION_IX_noqstr 3
#define PLJSONSL_OPTION_IX_max_size 4
#define PLJSONSL_OPTION_IX_object_drip 5
    
int
PLJSONSL__options(PLJSONSL* obj, ...)
    ALIAS:
    utf8            = PLJSONSL_OPTION_IX_utf8
    nopath          = PLJSONSL_OPTION_IX_nopath
    noqstr          = PLJSONSL_OPTION_IX_noqstr
    max_size        = PLJSONSL_OPTION_IX_max_size
    object_drip     = PLJSONSL_OPTION_IX_object_drip
    CODE:
    RETVAL = 0;
    if (ix == 0) {
        die("Do not call this function (_options) directly");
    }
    if (items > 2) {
        die("Usage: %s(o, ... boolean)", GvNAME(GvCV(cv)));
    }
    
    switch(ix) {
    case PLJSONSL_OPTION_IX_utf8:
        RETVAL = obj->options.utf8;
        if (items == 2) {
            obj->options.utf8 = SvIV(ST(1));
        }
        break;
    case PLJSONSL_OPTION_IX_nopath:
        RETVAL = obj->options.nopath;
        if (items == 2) {
            obj->options.nopath = SvIV(ST(1));
        }
        break;
    case PLJSONSL_OPTION_IX_noqstr:
        RETVAL = obj->options.noqstr;
        if (items == 2) {
            obj->options.noqstr = SvIV(ST(1));
        }
        break;
    case PLJSONSL_OPTION_IX_max_size:
        RETVAL = obj->options.max_size;
        if (items == 2) {
            obj->options.max_size = SvIV(ST(1));
        }
        break;
    case PLJSONSL_OPTION_IX_object_drip:
        RETVAL = obj->options.object_drip;
        if (items == 2) {
            obj->options.object_drip = SvIV(ST(1));
        }
        break;
    default:
        die("Unrecognized IX!?");
        break;
    }
    OUTPUT: RETVAL
    
